name: CI
on:
  push:
    branches: [ master, develop, "feature/githubactions" ]
  pull_request:
    branches: [ master, develop, "feature/githubactions" ]
jobs:
  build-windows:
    runs-on: windows-2019
    env:
      CONAN_USER_HOME_SHORT: None
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install system-wide dependencies
        run: |
          choco install --no-progress -r cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install innosetup
          python -m pip install poetry
      - name: Prepare virtualenv for tools
        run: |
          python -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v1
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          .venv\scripts\activate.ps1
          cd build
          conan profile new --detect --force default
          conan remote add -f bincrafters https://api.bintray.com/conan/bincrafters/public-conan
          conan remote add -f gamepad64-public https://api.bintray.com/conan/gamepad64/public-conan
          conan install .. --build=missing --build=cascade
          conan remove "*" --src --builds --force
      - name: Build application
        run: |
          cd build
          cmake -DUSE_STATIC_BOOST=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=built_binaries ..
          cmake --build . --config Release
      - name: Package application
        run: |
          .venv\scripts\activate.ps1
          cd build
          cmake --install .
          python ../scripts/configure_innosetup.py --packaging_dir pack --install_dir built_binaries
          pushd pack
          iscc librevault.iss
          popd
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: librevault-innosetup-windows-x64
          path: build/pack/result.exe

  build-linux-docker:
    runs-on: ubuntu-18.04
    container:
      image: ubuntu:20.04
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install system-wide dependencies
        run: |
          apt-get update
          apt-get install -y bash git python3-pip python3.8-dev python3.8-venv build-essential cmake libwayland-dev libxcomposite-dev libglib2.0-dev ninja-build ccache
          python3.8 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3.8 -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v1
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          cd build
          conan profile new --detect --force default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan remote add -f bincrafters https://api.bintray.com/conan/bincrafters/public-conan
          conan remote add -f gamepad64-public https://api.bintray.com/conan/gamepad64/public-conan
          conan install .. --build=missing --build=cascade
          conan remove "*" --src --builds --force
      - name: Restore ccache cache
        uses: actions/cache@v1
        env:
          cache-name: cache-ccache
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Build application
        run: |
          cd build
          cmake .. -GNinja -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

  build-macos:
    runs-on: macos-10.15
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - name: Install system-wide dependencies
        run: |
          brew install cmake ccache ninja
          python3 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3 -m venv .venv
          poetry install
          source .venv/bin/activate
          pip install "cryptography<2.4.0,>=1.3.4" "idna==2.6" "pyOpenSSL<19.0.0,>=16.0.0"
      - name: Restore Conan cache
        uses: actions/cache@v1
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          cd build
          conan profile new --detect --force default
          conan remote add -f bincrafters https://api.bintray.com/conan/bincrafters/public-conan
          conan remote add -f gamepad64-public https://api.bintray.com/conan/gamepad64/public-conan
          conan install .. --build=missing --build=cascade
          conan remove "*" --src --builds --force
      - name: Restore ccache cache
        uses: actions/cache@v1
        env:
          cache-name: cache-ccache
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Build application
        run: |
          cd build
          cmake .. -GNinja -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build .
